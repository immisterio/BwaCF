export default {
  async plain(hostname) {

      let js = atob('');

      js = js.replace("{localhost}", hostname+'/sisi');

      const ui = new Uint8Array(js.length)
        for (let i = 0; i < js.length; ++i) {
          ui[i] = js.charCodeAt(i)
      }

      return new Response(new TextDecoder("utf-8").decode(ui), {
          headers: {  
              "Content-Type": "application/javascript; charset=utf-8"
          }
      }); 
  }
};